{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "FLUX Framework Specification Schema",
  "description": "Schema for {feature}.specification.json files with optional complex feature support",
  "type": "object",
  "required": ["feature", "version", "validation_targets", "endpoints"],
  "properties": {
    "feature": {
      "type": "string",
      "pattern": "^[a-z][a-z0-9-]*$",
      "description": "Feature name (must match requirements file)"
    },
    "version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+$",
      "description": "Semantic version"
    },
    "generated_at": {
      "oneOf": [{ "type": "string" }, { "type": "object" }],
      "description": "Generation timestamp"
    },
    "last_updated": {
      "oneOf": [{ "type": "string" }, { "type": "object" }],
      "description": "Last update timestamp"
    },
    "source_requirements": {
      "type": "string",
      "description": "Source requirements filename"
    },

    "business_logic": {
      "type": "object",
      "description": "Core business rules and processes",
      "properties": {
        "calculations": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Business calculation rules and formulas"
        },
        "validations": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Input validation rules and constraints"
        },
        "workflows": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Step-by-step business process flows"
        },
        "permissions": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Access control and authorization rules"
        },
        "edge_cases": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Special scenarios and exception handling"
        },
        "error_scenarios": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Specific error conditions and responses"
        }
      }
    },

    "external_integrations": {
      "type": "object",
      "description": "External API specifications (optional for complex features)",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "provider": { "type": "string" },
          "base_url": { "type": "string" },
          "endpoint": { "type": "string" },
          "auth_method": { "type": "string" },
          "auth_param": { "type": "string" },
          "env_variable": { "type": "string" },
          "timeout_ms": { "type": "integer" },
          "retry_attempts": { "type": "integer" },
          "retry_delay_ms": { "type": "integer" },
          "rate_limit": { "type": "string" },
          "required_params": { "type": "object" },
          "response_mapping": { "type": "object" },
          "implementation_pattern": { "type": "object" }
        }
      }
    },

    "response_schemas": {
      "type": "object",
      "description": "Exact response formats (optional for reliability)",
      "properties": {
        "success_format": {
          "type": "object",
          "description": "Standard success response structure"
        },
        "error_format": {
          "type": "object",
          "description": "Standard error response structure"
        },
        "error_types": {
          "type": "object",
          "description": "Mapping of error codes to descriptions"
        }
      }
    },

    "environment_requirements": {
      "type": "object",
      "description": "Environment variables (optional for deployment)",
      "properties": {
        "required_vars": {
          "type": "array",
          "items": { "type": "string" }
        },
        "optional_vars": {
          "type": "array",
          "items": { "type": "string" }
        },
        "default_values": {
          "type": "object"
        },
        "validation": {
          "type": "object"
        },
        "usage_patterns": {
          "type": "object"
        }
      }
    },

    "implementation_details": {
      "type": "object",
      "description": "Algorithms and business logic (optional for precision)",
      "additionalProperties": {
        "type": "object"
      }
    },

    "security_requirements": {
      "type": "object",
      "description": "Security specifications (optional for secure features)",
      "properties": {
        "authentication": {
          "type": "string",
          "enum": ["none", "jwt", "api_key", "oauth", "session"]
        },
        "authorization": {
          "type": "array",
          "items": { "type": "string" }
        },
        "input_validation": {
          "type": "array",
          "items": { "type": "string" }
        },
        "rate_limiting": {
          "type": "object",
          "properties": {
            "requests_per_minute": { "type": "integer" },
            "requests_per_hour": { "type": "integer" },
            "per_ip_limit": { "type": "integer" },
            "per_user_limit": { "type": "integer" }
          }
        },
        "data_protection": {
          "type": "array",
          "items": { "type": "string" }
        },
        "cors_policy": {
          "type": "object",
          "properties": {
            "allowed_origins": {
              "type": "array",
              "items": { "type": "string" }
            },
            "allowed_methods": {
              "type": "array",
              "items": { "type": "string" }
            },
            "allowed_headers": {
              "type": "array",
              "items": { "type": "string" }
            }
          }
        }
      }
    },

    "performance_requirements": {
      "type": "object",
      "description": "Performance specifications (optional for high-performance features)",
      "properties": {
        "response_time_ms": {
          "type": "integer",
          "minimum": 1
        },
        "throughput_rps": {
          "type": "integer",
          "minimum": 1
        },
        "concurrent_users": {
          "type": "integer",
          "minimum": 1
        },
        "memory_limit_mb": {
          "type": "integer",
          "minimum": 1
        },
        "cpu_limit_percent": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100
        },
        "cache_strategy": {
          "type": "string",
          "enum": ["none", "memory", "redis", "cdn", "hybrid"]
        },
        "cache_ttl_seconds": {
          "type": "integer",
          "minimum": 1
        },
        "compression": {
          "type": "boolean"
        },
        "connection_pooling": {
          "type": "object",
          "properties": {
            "min_connections": { "type": "integer" },
            "max_connections": { "type": "integer" },
            "idle_timeout_ms": { "type": "integer" }
          }
        }
      }
    },

    "database_requirements": {
      "type": "object",
      "description": "Database and storage specifications (optional for data-driven features)",
      "properties": {
        "storage_type": {
          "type": "string",
          "enum": [
            "none",
            "postgresql",
            "mysql",
            "mongodb",
            "redis",
            "sqlite",
            "cassandra",
            "dynamodb"
          ]
        },
        "connection_config": {
          "type": "object",
          "properties": {
            "host_env_var": { "type": "string" },
            "port_env_var": { "type": "string" },
            "database_env_var": { "type": "string" },
            "username_env_var": { "type": "string" },
            "password_env_var": { "type": "string" },
            "ssl_required": { "type": "boolean" },
            "connection_timeout_ms": { "type": "integer", "minimum": 1000 },
            "pool_size": { "type": "integer", "minimum": 1 }
          }
        },
        "schema_definitions": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "table_name": { "type": "string" },
              "primary_key": { "type": "string" },
              "columns": { "type": "object" },
              "indexes": { "type": "array" },
              "constraints": { "type": "array" }
            }
          }
        },
        "migration_scripts": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "version": { "type": "string" },
              "description": { "type": "string" },
              "up_script": { "type": "string" },
              "down_script": { "type": "string" },
              "dependencies": { "type": "array", "items": { "type": "string" } }
            }
          }
        },
        "seed_data": {
          "type": "object"
        },
        "query_patterns": {
          "type": "object",
          "properties": {
            "create_operations": {
              "type": "array",
              "items": { "type": "string" }
            },
            "read_operations": {
              "type": "array",
              "items": { "type": "string" }
            },
            "update_operations": {
              "type": "array",
              "items": { "type": "string" }
            },
            "delete_operations": {
              "type": "array",
              "items": { "type": "string" }
            },
            "complex_queries": { "type": "array" }
          }
        },
        "backup_strategy": {
          "type": "object",
          "properties": {
            "frequency": {
              "type": "string",
              "enum": ["hourly", "daily", "weekly", "monthly", "on_demand"]
            },
            "retention_days": { "type": "integer", "minimum": 1 },
            "backup_type": {
              "type": "string",
              "enum": ["full", "incremental", "differential"]
            },
            "storage_location": { "type": "string" },
            "encryption_required": { "type": "boolean" }
          }
        },
        "data_validation": {
          "type": "object",
          "properties": {
            "integrity_checks": {
              "type": "array",
              "items": { "type": "string" }
            },
            "business_rules": {
              "type": "array",
              "items": { "type": "string" }
            },
            "referential_integrity": { "type": "boolean" }
          }
        }
      }
    },

    "event_specifications": {
      "type": "object",
      "description": "Event-driven architecture (optional for async features)",
      "properties": {
        "event_patterns": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "publish",
              "subscribe",
              "event_sourcing",
              "webhook",
              "websocket"
            ]
          }
        },
        "events_published": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "event_name": { "type": "string" },
              "description": { "type": "string" },
              "payload_schema": { "type": "object" },
              "frequency": {
                "type": "string",
                "enum": ["rare", "occasional", "frequent", "high_volume"]
              }
            }
          }
        },
        "events_subscribed": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "event_name": { "type": "string" },
              "description": { "type": "string" },
              "handler_function": { "type": "string" },
              "retry_policy": {
                "type": "string",
                "enum": ["none", "simple", "exponential", "custom"]
              }
            }
          }
        },
        "event_store": {
          "type": "object",
          "properties": {
            "storage_type": {
              "type": "string",
              "enum": ["memory", "redis", "database", "kafka", "rabbitmq"]
            },
            "retention_policy": { "type": "string" },
            "ordering_guarantee": { "type": "boolean" }
          }
        }
      }
    },

    "queue_requirements": {
      "type": "object",
      "description": "Background jobs and queues (optional for async processing)",
      "properties": {
        "queue_type": {
          "type": "string",
          "enum": ["none", "memory", "redis", "rabbitmq", "kafka", "sqs"]
        },
        "job_definitions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "job_name": { "type": "string" },
              "description": { "type": "string" },
              "trigger": {
                "type": "string",
                "enum": ["immediate", "scheduled", "event_driven", "cron"]
              },
              "priority": {
                "type": "string",
                "enum": ["low", "normal", "high", "critical"]
              },
              "max_attempts": { "type": "integer", "minimum": 1 },
              "timeout_ms": { "type": "integer", "minimum": 1000 },
              "payload_schema": { "type": "object" }
            }
          }
        },
        "retry_policies": {
          "type": "object",
          "properties": {
            "default_strategy": {
              "type": "string",
              "enum": ["linear", "exponential", "custom"]
            },
            "max_retries": { "type": "integer", "minimum": 0 },
            "base_delay_ms": { "type": "integer", "minimum": 100 },
            "max_delay_ms": { "type": "integer", "minimum": 1000 }
          }
        },
        "dead_letter_queue": {
          "type": "object",
          "properties": {
            "enabled": { "type": "boolean" },
            "retention_days": { "type": "integer", "minimum": 1 },
            "notification_required": { "type": "boolean" }
          }
        }
      }
    },

    "validation_targets": {
      "type": "object",
      "required": [
        "total_endpoints",
        "required_coverage",
        "voilajsx_patterns",
        "test_requirements",
        "code_quality_targets",
        "reliability_thresholds"
      ],
      "properties": {
        "total_endpoints": {
          "type": "integer",
          "minimum": 1
        },
        "total_contracts": {
          "type": "integer",
          "minimum": 1
        },
        "total_logic_files": {
          "type": "integer",
          "minimum": 1
        },
        "total_test_files": {
          "type": "integer",
          "minimum": 1
        },
        "total_routes": {
          "type": "integer",
          "minimum": 1
        },
        "total_functions": {
          "type": "integer",
          "minimum": 1
        },
        "total_test_cases": {
          "type": "integer",
          "minimum": 1
        },
        "required_coverage": {
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "voilajsx_patterns": {
          "type": "object",
          "required": [
            "required_modules",
            "required_patterns",
            "module_initialization"
          ],
          "properties": {
            "required_modules": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "util",
                  "logger",
                  "error",
                  "security",
                  "auth",
                  "database",
                  "cache",
                  "storage",
                  "email",
                  "queue",
                  "event",
                  "config"
                ]
              }
            },
            "required_patterns": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "security_patterns": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "module_initialization": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "response_patterns": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "test_requirements": {
          "type": "object",
          "required": ["critical_test_patterns", "minimum_critical_coverage"],
          "properties": {
            "critical_test_patterns": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "minimum_critical_coverage": {
              "type": "integer",
              "minimum": 1
            },
            "security_test_patterns": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "voilajsx_test_patterns": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "edge_case_patterns": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "code_quality_targets": {
          "type": "object",
          "required": [
            "error_handling_required",
            "structured_logging_required",
            "voilajsx_compliance_minimum"
          ],
          "properties": {
            "error_handling_required": {
              "type": "boolean"
            },
            "input_sanitization_required": {
              "type": "boolean"
            },
            "structured_logging_required": {
              "type": "boolean"
            },
            "voilajsx_compliance_minimum": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            "security_score_minimum": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            "type_safety_required": {
              "type": "boolean"
            }
          }
        },
        "reliability_thresholds": {
          "type": "object",
          "required": ["overall_reliability_minimum"],
          "properties": {
            "contract_compliance_minimum": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            "test_validation_minimum": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            "types_validation_minimum": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            "lint_validation_minimum": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            "code_quality_minimum": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            "overall_reliability_minimum": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            }
          }
        },
        "breaking_change_prevention": {
          "type": "object",
          "properties": {
            "api_contract_locked": {
              "type": "boolean"
            },
            "response_schema_stable": {
              "type": "boolean"
            },
            "backward_compatibility_required": {
              "type": "boolean"
            },
            "route_conflicts_blocked": {
              "type": "boolean"
            }
          }
        }
      }
    },

    "endpoints": {
      "type": "object",
      "minProperties": 1,
      "patternProperties": {
        "^[a-zA-Z@][a-zA-Z0-9@_-]*$": {
          "type": "object",
          "required": ["id", "route", "folder", "contract", "logic", "test"],
          "properties": {
            "id": {
              "type": "integer",
              "minimum": 1
            },
            "route": {
              "type": "string",
              "pattern": "^(GET|POST|PUT|DELETE|PATCH) /"
            },
            "folder": {
              "type": "string",
              "pattern": "^src/features/"
            },
            "url": {
              "type": "string"
            },
            "template_replacements": {
              "type": "object"
            },
            "validation_specifics": {
              "type": "object",
              "properties": {
                "required_voilajsx_patterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "required_test_patterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "security_requirements": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "input_validation_requirements": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "contract": {
              "type": "object",
              "required": ["file", "exports", "routes"],
              "properties": {
                "file": {
                  "type": "string",
                  "pattern": "\\.contract\\.ts$"
                },
                "exports": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "routes": {
                  "type": "object",
                  "patternProperties": {
                    "^(GET|POST|PUT|DELETE|PATCH) /": {
                      "type": "string"
                    }
                  }
                },
                "imports": {
                  "type": "object",
                  "properties": {
                    "appkit": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "external": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "helpers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "tests": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "logic": {
              "type": "object",
              "required": ["file", "exports"],
              "properties": {
                "file": {
                  "type": "string",
                  "pattern": "\\.logic\\.ts$"
                },
                "exports": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "function_signature": {
                  "type": "string"
                },
                "imports": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "business_rules": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "implementation_guidance": {
                  "type": "object"
                },
                "environment_usage": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "functions": {
                  "type": "object",
                  "patternProperties": {
                    "^[a-zA-Z_][a-zA-Z0-9_]*$": {
                      "type": "object",
                      "properties": {
                        "params": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "return_type": {
                          "type": "string"
                        },
                        "response_schema": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            },
            "test": {
              "type": "object",
              "required": ["file", "test_cases"],
              "properties": {
                "file": {
                  "type": "string",
                  "pattern": "\\.test\\.ts$"
                },
                "template_replacements": {
                  "type": "object"
                },
                "imports": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "test_cases": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name",
                      "http_method",
                      "path",
                      "expected_status"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "http_method": {
                        "type": "string",
                        "enum": ["GET", "POST", "PUT", "DELETE", "PATCH"]
                      },
                      "path": {
                        "type": "string"
                      },
                      "expected_status": {
                        "type": "integer",
                        "minimum": 100,
                        "maximum": 599
                      },
                      "expected_properties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "validation": {
                        "type": "string",
                        "description": "Custom validation logic description"
                      },
                      "mock_setup": {
                        "type": "string"
                      },
                      "template_values": {
                        "type": "object"
                      }
                    }
                  }
                },
                "coverage_target": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 100
                },
                "coverage_files": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },

    "validation_skip_pattern": {
      "type": "string",
      "description": "Pattern for fields to skip during validation"
    },

    "file_structure": {
      "type": "object",
      "patternProperties": {
        "^src/": {
          "type": "string",
          "enum": ["exists", "missing"]
        }
      }
    }
  },
  "additionalProperties": true
}
